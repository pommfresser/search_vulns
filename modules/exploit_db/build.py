import csv

try:  # use ujson if available
    import ujson as json
except ModuleNotFoundError:
    import json

import os
import re

import requests

from modules.utils import SQLITE_TIMEOUT, get_database_connection

SCRIPT_DIR = os.path.dirname(os.path.realpath(__file__))
CVE_EDB_MAP_FILE = os.path.join(SCRIPT_DIR, "cveid_to_edbid.json")


def full_update(productdb_config, vulndb_config, module_config, stop_update):
    # download exploit index file from GitLab and parse it to obtain CVE<->EDB mapping
    cve_edb_map = {}
    cve_re = re.compile(r"((cve|CVE)-[0-9]{4}-[0-9]{4,})")
    exploits_csv = requests.get(
        "https://gitlab.com/exploit-database/exploitdb/-/raw/main/files_exploits.csv"
    )
    exploits_csv = exploits_csv.content.decode()
    exploits_csv = csv.reader(exploits_csv.splitlines(), delimiter=",")
    cve_info_column = None
    for row in exploits_csv:
        # get index of "codes" column, which contains info about CVE, OSVDB and other IDs
        if not cve_info_column:
            for i, col in enumerate(row):
                if col.strip().lower() == "codes":
                    cve_info_column = i
                    break
            continue

        # extract CVEs from "codes" column and store in map
        codes = row[cve_info_column].strip()
        if codes:
            edbid = row[0]
            codes = codes.replace("â€“", "-")  # replace EN Dash with Hyphen
            for code in cve_re.findall(codes):
                cve_id = code[0]
                if cve_id not in cve_edb_map:
                    cve_edb_map[cve_id] = []
                if edbid not in cve_edb_map[cve_id]:
                    cve_edb_map[cve_id].append(edbid)

    # save mapping separately as byproduct
    with open(CVE_EDB_MAP_FILE, "w") as f:
        f.write(json.dumps(cve_edb_map))

    # save mapping in vulndb, first create table then incert data
    db_conn = get_database_connection(vulndb_config, sqlite_timeout=SQLITE_TIMEOUT)
    db_cursor = db_conn.cursor()
    if vulndb_config["TYPE"] == "sqlite":
        create_cve_edbids_table = "DROP TABLE IF EXISTS cve_edb; CREATE TABLE cve_edb (cve_id VARCHAR(25), edb_ids TEXT, PRIMARY KEY (cve_id));"
    elif vulndb_config["TYPE"] == "mariadb":
        create_cve_edbids_table = "CREATE OR REPLACE TABLE cve_edb (cve_id VARCHAR(25) CHARACTER SET ascii, edb_ids TEXT CHARACTER SET ascii, PRIMARY KEY (cve_id));"
    # necessary because SQLite can't handle more than one query a time
    for query in create_cve_edbids_table.split(";"):
        if query:
            db_cursor.execute(query + ";")
    db_conn.commit()

    insert_statement = "INSERT INTO cve_edb VALUES(?, ?)"
    for cveid, edbids in cve_edb_map.items():
        if cveid == "N/A":  # skip the fake item holding EDBIDs without CVEID
            continue

        edbids = sorted(set(edbids), key=lambda eid: int(eid))
        db_cursor.execute(insert_statement, (cveid, ",".join(edbids)))

    db_conn.commit()
    db_conn.close()

    return True, [CVE_EDB_MAP_FILE]
