#!/usr/bin/env python3

import unittest
from search_vulns import search_vulns

class TestSearches(unittest.TestCase): 

    def test_search_wp_572(self):
        self.maxDiff = None
        result = search_vulns(query='cpe:2.3:a:wordpress:wordpress:5.7.2:*:*:*:*:*:*:*',add_other_exploit_refs=True,is_good_cpe=True)
        expected_exploits = ['http://plugins.trac.wordpress.org/changeset/435356/scormcloud', 'https://www.exploit-db.com/exploits/38936', 'http://www.securityfocus.com/bid/64587', 'https://vavkamil.cz/2021/11/25/wordpress-plugin-confusion-update-can-get-you-pwned/', 'http://plugins.trac.wordpress.org/changeset/490070/my-calendar', 'https://blog.sonarsource.com/wordpress-object-injection-vulnerability/', 'http://plugins.trac.wordpress.org/changeset?old_path=%2Fbad-behavior&old=543807&new_path=%2Fbad-behavior&new=543807', 'https://blog.sonarsource.com/wordpress-core-unauthenticated-blind-ssrf/', 'https://github.com/hxlxmjxbbxs/CVE-2022-3590-WordPress-Vulnerability-Scanner', 'https://www.exploit-db.com/exploits/50663', 'http://packetstormsecurity.com/files/165540/WordPress-Core-5.8.2-SQL-Injection.html', 'https://github.com/0x4E0x650x6F/Wordpress-cve-CVE-2022-21661', 'https://github.com/APTIRAN/CVE-2022-21661', 'https://github.com/QWERTYisme/CVE-2022-21661', 'https://github.com/TAPESH-TEAM/CVE-2022-21661-WordPress-Core-5.8.2-WP_Query-SQL-Injection', 'https://github.com/WellingtonEspindula/SSI-CVE-2022-21661', 'https://github.com/z92g/CVE-2022-21661']
        result_exploits = []
        for cve in result:
            data = result.get(cve)
            if 'exploits' in data:
                for exploit in data['exploits']:
                    result_exploits.append(exploit)
        for expected in expected_exploits:
            self.assertIn(expected, result_exploits)

    def test_search_apache_2425(self):
        self.maxDiff = None
        result = search_vulns(query='cpe:2.3:a:apache:http_server:2.4.25:*:*:*:*:*:*:*',add_other_exploit_refs=True,is_good_cpe=True)
        expected_exploits = ["https://www.exploit-db.com/exploits/29739", "https://www.exploit-db.com/exploits/19244", "https://www.exploit-db.com/exploits/47688", "https://www.exploit-db.com/exploits/47689", "https://www.exploit-db.com/exploits/20595", "https://www.exploit-db.com/exploits/42745", "https://www.exploit-db.com/exploits/46676"]
        result_exploits = []
        for cve in result:
            data = result.get(cve)
            if 'exploits' in data:
                for exploit in data['exploits']:
                    result_exploits.append(exploit)
        for expected in expected_exploits:
            self.assertIn(expected, result_exploits)


    def test_search_proftpd_133c(self):
        self.maxDiff = None
        result = search_vulns(query='cpe:2.3:a:proftpd:proftpd:1.3.3:c:*:*:*:*:*:*',add_other_exploit_refs=True,is_good_cpe=True)
        expected_exploits = ["https://www.exploit-db.com/exploits/16129"]
        result_exploits = []
        for cve in result:
            data = result.get(cve)
            if 'exploits' in data:
                for exploit in data['exploits']:
                    result_exploits.append(exploit)
        for expected in expected_exploits:
            self.assertIn(expected, result_exploits)


    def test_search_redis_323(self):
        self.maxDiff = None
        result = search_vulns(query='cpe:2.3:a:redis:redis:3.2.3:*:*:*:*:*:*:*',add_other_exploit_refs=True,is_good_cpe=True)
        expected_exploits = ['http://packetstormsecurity.com/files/166885/Redis-Lua-Sandbox-Escape.html', 'https://github.com/JacobEbben/CVE-2022-0543', 'https://github.com/SiennaSkies/redisHack', 'https://github.com/aodsec/CVE-2022-0543', 'https://github.com/z92g/CVE-2022-0543', 'https://github.com/redis/redis/pull/10651', 'https://github.com/redis/redis/pull/10651', 'https://github.com/convisolabs/CVE-2022-24834', 'https://github.com/redis/redis/issues/8712', 'https://github.com/redis/redis/commit/0bf90d944313919eb8e63d3588bf63a367f020a3']
        result_exploits = []
        for cve in result:
            data = result.get(cve)
            if 'exploits' in data:
                for exploit in data['exploits']:
                    result_exploits.append(exploit)
        for expected in expected_exploits:
            self.assertIn(expected, result_exploits)

if __name__ == '__main__':
    unittest.main()